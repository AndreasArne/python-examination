version: 2.1
commands:
    create_concatenated_requirements:
        description: "Concatenate all requirements.txt files. File is used as checksum source for part of caching key."
        parameters:
          filename:
            type: string
        steps:
          - run:
              name: Combine requirements.txt files to single file
              command: cat *requirements.txt > <<parameters.filename>>

    add_commit_msg_to_env:
      steps:
          - checkout
          - run:
                command: cd python-examination && echo "export GIT_COMMIT_DESC='$(git log --format=oneline -n 1 $CIRCLE_SHA1)'" >> $BASH_ENV

    test_steps_python:
        description: "Python test steps"
        steps:
            - checkout
            - run:
                name: Print info
                command: |
                    make info
            - create_concatenated_requirements:
                filename: combined-requirements.txt
            # - restore_cache:
            #     keys:
            #         - venv-test-{{ checksum "combined-requirements.txt" }}-8 # increase to clear cache
            - run:
                name: install dependencies
                command: |
                    python3 -m venv venv
                    . venv/bin/activate
                    make install-dev
            # - save_cache:
            #     key: venv-test-{{ checksum "combined-requirements.txt" }}-8
            #     paths:
            #         - venv
            - run: echo "source ~/exam/venv/bin/activate" >> $BASH_ENV
            - run:
                name: run tests
                command: |
                  make test

jobs:
  python38:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/exam
    steps:
        - test_steps_python

  python39:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/exam
    steps:
        - test_steps_python

  python310:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/exam
    steps:
        - test_steps_python

  python311:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/exam
    steps:
        - test_steps_python

  build:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/exam
    steps:
        - checkout
        # - restore_cache:
        #     keys:
        #         - venv-build-{{ checksum "requirements.txt" }}-8
        - run:
            name: install dependencies
            command: |
                python3 -m venv venv
                . venv/bin/activate
                make install
        # - save_cache:
        #     key: venv-build-{{ checksum "requirements.txt" }}-8
        #     paths:
        #         - venv
        - run: echo "source ~/exam/venv/bin/activate" >> $BASH_ENV
        - run:
            name: run build
            command: |
              make build
        - run:
            name: Save commit msg for next job
            command: |
                echo "export GIT_COMMIT_DESC='$(git log --format=oneline -n 1 $CIRCLE_SHA1)'" > ~/commit.env
        - save_cache:
            key: build-{{ epoch }}
            paths:
                - build/examiner
                - ~/commit.env

  push_to_python:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/python
    steps:
        - add_ssh_keys:
            fingerprints:
              - "e0:01:ec:80:09:8d:34:dd:e0:c0:65:2f:3f:6e:f7:42"
        - run:
            name: Clone python repo
            command: git clone https://github.com/dbwebb-se/python.git
        - restore_cache:
            keys:
                - build-
        - run:
            name: Source commit.env
            command: |
                cat ~/commit.env
                source ~/commit.env
                echo "source ~/commit.env" >> $BASH_ENV
                echo $GIT_COMMIT_DESC
        - run:
            name: Copy build to python
            command: |
                rm -rf python/.dbwebb/test/examiner
                cp -r ~/exam/build/examiner python/.dbwebb/test/examiner
        - run:
            name: Diff changes
            command: |
                cd python
                git --no-pager diff .dbwebb/test/examiner
        - run:
            name: Config git
            command: |
                cd python
                git config credential.helper 'cache --timeout=120'
                git config user.email 'circleci@python.examination'
                git config user.name 'Circle Ci python-examination'
        - run:
            name: Add and commit change
            command: |
                cd python
                git add .dbwebb/test/examiner
                git commit -m "python-examination from CircleCI" -m "$GIT_COMMIT_DESC" -m "[skip ci]"
        - run:
            name: Push python
            command: |
                cd python
                git push -q https://${GITHUB_TOKEN}@github.com/dbwebb-se/python.git master > /dev/null 2>&1



  push_to_oopython:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/oopython
    steps:
        - add_ssh_keys:
            fingerprints:
              - ""
        - run:
            name: Clone oopython repo
            command: git clone https://github.com/dbwebb-se/oopython.git
        - restore_cache:
            keys:
                - build-
        - run:
            name: Source commit.env
            command: |
                cat ~/commit.env
                source ~/commit.env
                echo "source ~/commit.env" >> $BASH_ENV
                echo $GIT_COMMIT_DESC
        - run:
            name: Copy build to oopython
            command: |
                rm -rf oopython/.dbwebb/test/examiner
                cp -r ~/exam/build/examiner oopython/.dbwebb/test/examiner
        - run:
            name: Diff changes
            command: |
                cd oopython
                git --no-pager diff .dbwebb/test/examiner
        - run:
            name: Config git
            command: |
                cd oopython
                git config credential.helper 'cache --timeout=120'
                git config user.email 'circleci@python.examination'
                git config user.name 'Circle Ci python-examination'
        - run:
            name: Add and commit change
            command: |
                cd oopython
                git add .dbwebb/test/examiner
                git commit -m "python-examination from CircleCI" -m "$GIT_COMMIT_DESC" -m "[skip ci]"
        - run:
            name: Push oopython
            command: |
                cd oopython
                git push -q https://${GITHUB_TOKEN}@github.com/dbwebb-se/oopython.git master > /dev/null 2>&1



workflows:
    version: 2
    test-build:
        jobs: # Every job needs a tag if on job has a tag. Aka becuase push_to_python has a tag to releases we need a always run tag on the others
            - python38:
                filters: &always-run-filter
                    tags:
                        only: /.*/
            - python39:
                filters:
                    <<: *always-run-filter
            - python310:
                filters:
                    <<: *always-run-filter
            - python311:
                filters:
                    <<: *always-run-filter
            - build:
                filters:
                    <<: *always-run-filter
                requires:
                    - python38
                    - python39
                    - python310
                    - python311
            - push_to_python:
                filters:
                    branches:
                        ignore: /.*/ # ignore all branch builds. If we dont have this, push_to_python will run anyways because the required job is run. Some kind of "or" logic
                    tags:
                        only: /^v\d+\.\d+\.\d+/
                requires:
                    - build
            - push_to_oopython:
                filters:
                    branches:
                        ignore: /.*/ # ignore all branch builds. If we dont have this, push_to_python will run anyways because the required job is run. Some kind of "or" logic
                    tags:
                        only: /^v\d+\.\d+\.\d+/
                requires:
                    - build
